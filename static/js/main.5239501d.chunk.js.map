{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","react_default","a","createElement","className","Form","onSubmit","weatherMethod","type","name","placeholder","Weather","city","country","temp","humidity","condition","error","API_KEY","App","state","undefined","getWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","sys","weather","description","stop","this","info","class","href","rel","aria-label","googl","components_form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5239501d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Info = props => (\r\n  <div className=\"info\">\r\n    <h1>Weather Application</h1>\r\n    <p>Find out the weather in your city</p>\r\n  </div>\r\n);\r\n\r\nexport default Info;","import React, { Component } from 'react';\r\n\r\nconst Form = props => (\r\n  <form className=\"form-container\" onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n    <button className=\"btn\">Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather-container\">\r\n    { props.city &&\r\n      // Сюда нужны иконки\r\n      <div>\r\n        <p className=\"weather-key\">\r\n          <i className=\"fas fa-map-marker-alt\"></i> Location: <span className=\"weather-value\">{props.city}, {props.country}</span>\r\n        </p>\r\n        <p className=\"weather-key\">\r\n          <i className=\"fas fa-temperature-low\"></i> Temperature: <span className=\"weather-value\">{props.temp} &#8451;</span>\r\n        </p>\r\n        <p className=\"weather-key\">\r\n          <i className=\"fas fa-tint\"></i> Humidity: <span className=\"weather-value\">{props.humidity}%</span>\r\n        </p>\r\n        <p className=\"weather-key\">\r\n          <i className=\"fas fa-cloud-sun-rain\"></i> Condition: <span className=\"weather-value\">{props.condition}</span>\r\n        </p>\r\n      </div>\r\n    }\r\n    <p className=\"error-note\"> {props.error} </p>\r\n  </div>\r\n);\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport './App.css';\n\nconst API_KEY = \"cd699731e2b2d7d4ec620936f3ef50b6\";\n\nclass App extends Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    condition: undefined,\n    error:  undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    if (city) {\n      const api_url = await \n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        condition: data.weather[0].description,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        condition: undefined,\n        error: \"Enter the city you want to find\"\n      });\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"container\">\n\n          <div className=\"left-block\">\n            <Info />\n            <div className=\"author\">\n              <i class=\"fab fa-github\"></i>\n              <a href=\"https://github.com/danatlas\" target=\"_blank\"\n                rel=\"noopener noreferrer\" className=\"btn-auth\" \n                aria-label=\"Follow @nourabusoud on GitHub\">\n                \n                <span googl=\"true\"> Follow @danatlas</span>\n              </a>\n              <br/>\n                <span className=\"git-auth\">\n                  View on <a target=\"_blank\" rel=\"noopener noreferrer\" \n                  href=\"https://github.com/DanAtlas/weather-react-app\">Github</a>\n                </span>\n            </div>\n          </div>\n\n          <div className=\"right-block\">\n            <Form weatherMethod={this.getWeather} />\n            <Weather \n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              condition={this.state.condition}\n              error={this.state.error}\n            />\n          </div>\n\n        </div>\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}